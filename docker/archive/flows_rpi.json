[{"id":"7d8ba940.199e08","type":"mqtt in","z":"7d9ad29c.85c98c","name":"","topic":"ArduinoGateway/MQTT/Publish/Event","qos":"2","broker":"5a2b0ad2.aaa674","x":230,"y":80,"wires":[["7e2036f9.efb988"]]},{"id":"7e2036f9.efb988","type":"function","z":"7d9ad29c.85c98c","name":"Parse MQTT String","func":"msg.OriginalPayload = msg.payload;\n\nSplitTheString(msg.payload);\n\nswitch (msg.NodeID) {\n    case \"1\":\n        msg.NodeIDName = \"Livingroom\";\n        break;\n    case \"2\":\n        msg.NodeIDName = \"Kitchen\";\n        break;\n    case \"3\":\n        msg.NodeIDName = \"Garden\";\n        break;\n    case \"4\":\n        msg.NodeIDName = \"Master bedroom\";\n        break;\n    case \"5\":\n        msg.NodeIDName = \"Bathroom\";\n        break;\n    case \"6\":\n        msg.NodeIDName = \"Hal\";\n        break;\n    case \"7\":\n        msg.NodeIDName = \"Hal upstairs\";\n        break;\n    case \"8\":\n        msg.NodeIDName = \"Bedroom 1\";\n        break;\n    case \"9\":\n        msg.NodeIDName = \"Bedroom 2\";\n        break;\n    case \"10\":\n        msg.NodeIDName = \"Office\";\n        break;\n    case \"11\":\n        msg.NodeIDName = \"Toilet\";\n        break;\n    case \"12\":\n        msg.NodeIDName = \"Garage\";\n        break;\n    default:\n    \tmsg.NodeIDName = \"Unknown\";\n}\n\n\nfunction SplitTheString(ResultStr) {\n    if (ResultStr !== null) {\n        var SplitChars = '/';\n        if (ResultStr.indexOf(SplitChars) >= 0) {\n            var DtlStr = ResultStr.split(SplitChars);\n            msg.GatewayID  = DtlStr[0];\n            msg.NetworkID = DtlStr[1];\n            msg.NodeID = DtlStr[2];\n            msg.DeviceID = DtlStr[3];\n            msg.Variable1 = DtlStr[4];\n            msg.Variable2 = DtlStr[5];\n        }\n    }\n}\nreturn msg;","outputs":1,"noerr":0,"x":180.66665649414062,"y":152.6666488647461,"wires":[["48276c92.463354","a9c65aab.131968"]]},{"id":"a9c65aab.131968","type":"change","z":"7d9ad29c.85c98c","name":"","rules":[{"t":"set","p":"timestamp","pt":"msg","to":"payload","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":132.66665649414062,"y":318.0000305175781,"wires":[["e7f0baf8.cc4c48"]]},{"id":"e7f0baf8.cc4c48","type":"function","z":"7d9ad29c.85c98c","name":"Update Context","func":"\ncontext.global.data = context.global.data || new Object();\n\ncontext.global.data.timestamp = new Date().toLocaleString();\ncontext.global.data.GatewayID = msg.GatewayID;\ncontext.global.data.NetworkID = msg.NetworkID;\ncontext.global.data.NodeID = msg.NodeID;\ncontext.global.data.DeviceID = msg.DeviceID;\ncontext.global.data.Variable1 = msg.Variable1;\ncontext.global.data.Variable2 = msg.Variable2;\ncontext.global.data.payload = msg.payload;\n\n//node.warn(\"time:\" + context.global.data.timestamp);\n\nreturn msg;","outputs":1,"noerr":0,"x":126.66665649414062,"y":361.66668701171875,"wires":[["d8364402.4fdf88"]]},{"id":"d8364402.4fdf88","type":"function","z":"7d9ad29c.85c98c","name":"db Cache","func":"if(context.global.temp === undefined || context.global.temp === null)\n{\n    \n    //initialising the global context, this happens when node-red is rebooted\n    node.warn(\"Global context initialised\" );\n    context.global.temp = new Object();\n    context.global.temp.newDeltaInHours = 0;\n}\n        \n\nif(context.global.temp.newDeltaInHours > 1 )\n{\n   //if the cache file is full, we flush it to the database and re-initialise the global context object\n    node.warn(\"Newdelta hours are :\" + context.global.temp.newDeltaInHours);\n    node.warn(\"Creating new temp object, current time is\" + new Date());\n    context.global.temp = new Object();\n    context.global.temp.newDeltaInHours = 0;\n    \n    //One hour has passed, now do something, like flushing the cache data to database.\n    \n    node.warn(\"Flushing to database at \" + new Date().valueOf());\n    //IMPORTANT, delete the cachefile\n    return [ null,msg];\n\n    //node.warn(\"context global temp new object:\" + context.global.temp);\n}\nelse\n{\n    //if cache file is not full we first check if the global context variables are initialised or not\n    if (context.global.temp.difftimecache === undefined || context.global.temp.difftimecache === null || context.global.temp.difftimecache !== context.global.temp.difftimecache) \n    {\n        // this means the global context main object is initialised but not the different sub attributes, so we are doing that here\n        node.warn(\"Initialising difftimecache and oldtime\");\n        context.global.temp.difftimecache = 0;\n        context.global.temp.oldtime = new Date().valueOf();\n         \n        //node.warn(\"time is now defined:\" + context.global.temp.oldtime);\n        //node.warn(\"delta is now defined:\" + context.global.temp.difftimecache);\n        context.global.temp.counter = 1;\n          \n        //TODO initialise JSON file and first data entry\n    }\n    else\n    {\n        //global context main and child attributes are all initialised, this means we can start measuring time delta.\n        //node.warn(\"in else statement\");\n        //context.global.temp = context.global.temp;\n        context.global.temp.counter++;\n        \n        //defining the current time\n        var currentTime = new Date().valueOf();\n        //node.warn(\"time now:\" + currentTime);\n        \n        //Quiring current delta, should be 0 or more\n        var currentDelta = context.global.temp.difftimecache;\n        //node.warn(\"current delta:\" + currentDelta);\n        \n        // Now calculating the new delta, which is substracting the old time from the new time\n        var newDelta = currentTime - context.global.temp.oldtime;\n        //node.warn(\"newDelta:\" + newDelta);\n        \n        //convering newdelta in hours.\n        var newDeltaInHours = newDelta/1000/60/60;\n        \n        //putting the newdeltahours in global context\n        context.global.temp.newDeltaInHours = newDeltaInHours;\n        //Math.abs(currentTime - currentDelta) / 3600\n        //node.warn(\"calculation:\" + newDeltaInHours);\n        \n        //updating the timediffcache with the new delta\n        context.global.temp.difftimecache = newDelta;\n        \n        //ow, we put the new delta and hours delta in the msg objext\n        msg.timedelta = newDelta;\n        msg.newDeltaInHours = newDeltaInHours;\n       \n        // Update JSON file with new data entries\n        UpdateJson()\n        \n        //updat global context with latest variables\n        context.global.temp.Variable1 = msg.Variable1;\n        context.global.temp.Variable2 = msg.Variable2;\n        \n        //sending msg with JSON in payload to node-red function to write the entry in the log\n        return [msg,null];\n      \n    }\n    \n  \n}\n\n\nfunction UpdateJson() {\n    //node.warn(\"Updating JSON\");\n    var UpdateEntry = {};\n    UpdateEntry.GatewayID = msg.GatewayID;\n    UpdateEntry.NetworkID = msg.NetworkID;\n    UpdateEntry.NodeID = msg.NodeID;\n    UpdateEntry.NodeIDName = msg.NodeIDName;\n    UpdateEntry.DeviceID = msg.DeviceID;\n    UpdateEntry.Variable1 = msg.Variable1;\n    UpdateEntry.Variable2 = msg.Variable2;\n    msg.payload = UpdateEntry;\n    //node.warn(\"JSON String: \" + msg.payload);\n    \n    \n}\n        \n    //node.warn(\"context global temp :\" + context.global.temp);\n\n","outputs":"2","noerr":0,"x":119.66665649414062,"y":414.6667175292969,"wires":[["9fafdfa3.95679","2e497725.b8e968","d968d756.3ad478","87697bee.0de8a8"],["65f38747.67f568"]]},{"id":"9fafdfa3.95679","type":"file","z":"7d9ad29c.85c98c","name":"","filename":"JSON_Events","appendNewline":true,"createDir":false,"overwriteFile":"false","x":399.6666564941406,"y":248.3333740234375,"wires":[]},{"id":"65f38747.67f568","type":"file","z":"7d9ad29c.85c98c","name":"","filename":"JSON_Events","appendNewline":true,"createDir":false,"overwriteFile":"delete","x":144.66665649414062,"y":469.3334045410156,"wires":[]},{"id":"2e497725.b8e968","type":"function","z":"7d9ad29c.85c98c","name":"Copy","func":"msg.OriginalPayload = msg.payload;\nreturn [msg,msg];","outputs":"2","noerr":0,"x":297.6666564941406,"y":413.66668701171875,"wires":[["613af5c5.dd89dc"],["23392da4.7e0642"]]},{"id":"613af5c5.dd89dc","type":"function","z":"7d9ad29c.85c98c","name":"Temperature","func":"msg.payload = msg.Variable1;\nreturn msg;","outputs":1,"noerr":0,"x":454.66656494140625,"y":409.6666717529297,"wires":[["855cf18c.5871d"]]},{"id":"23392da4.7e0642","type":"function","z":"7d9ad29c.85c98c","name":"Humidity","func":"msg.payload = msg.Variable2;\nreturn msg;","outputs":1,"noerr":0,"x":448.6665344238281,"y":453.6667785644531,"wires":[["e9e364f0.79ae38"]]},{"id":"855cf18c.5871d","type":"function","z":"7d9ad29c.85c98c","name":"Crossbar IO AWS","func":"var autobahn = context.global.autobahn;\nvar connection = new autobahn.Connection({\n   url: 'ws://ec2-54-149-139-192.us-west-2.compute.amazonaws.com:8080/ws',\n   realm: 'React'}\n);\n//node.warn(\"authbahn connection created\");\nconnection.onopen = function (session) {\n\n   // SUBSCRIBE to a topic and receive events\n   //\n   //node.warn(\"in .onopen\");\n   session.publish('com.example.ontemperature', [msg.payload,msg.OriginalPayload]);\n   //node.warn(msg.payload + \"Â° Celcius published from \" + msg.NodeIDName + \".\");\n};\n\nconnection.open();\n\nreturn msg;","outputs":1,"noerr":0,"x":767.6666259765625,"y":409.6667175292969,"wires":[[]]},{"id":"e9e364f0.79ae38","type":"function","z":"7d9ad29c.85c98c","name":"Crossbar IO AWS","func":"var autobahn = context.global.autobahn;\nvar connection = new autobahn.Connection({\n   url: 'ws://ec2-54-149-139-192.us-west-2.compute.amazonaws.com:8080/ws',\n   realm: 'React'}\n);\n//node.warn(\"authbahn connection created\");\nconnection.onopen = function (session) {\n\n   // SUBSCRIBE to a topic and receive events\n   //\n   //node.warn(\"in .onopen\");\n   session.publish('com.example.onhumidity', [msg.payload]);\n   //node.warn(msg.payload + \" humidity published from \" + msg.NodeIDName + \".\");\n};\n\nconnection.open();\n\nreturn msg;","outputs":1,"noerr":0,"x":769.6666259765625,"y":457.6667175292969,"wires":[[]]},{"id":"d9191a9f.407ed8","type":"inject","z":"7d9ad29c.85c98c","name":"","topic":"55","payload":"55","payloadType":"str","repeat":"","crontab":"","once":false,"x":670,"y":240,"wires":[["855cf18c.5871d","87697bee.0de8a8"]]},{"id":"d968d756.3ad478","type":"debug","z":"7d9ad29c.85c98c","name":"","active":false,"console":"false","complete":"true","x":411,"y":306,"wires":[]},{"id":"48276c92.463354","type":"debug","z":"7d9ad29c.85c98c","name":"","active":false,"console":"false","complete":"payload","x":509,"y":141,"wires":[]},{"id":"87697bee.0de8a8","type":"mqtt out","z":"7d9ad29c.85c98c","name":"","topic":"ArduinoGateway/MQTT/Publish/Event","qos":"","retain":"","broker":"7b562af0.dce684","x":750,"y":520,"wires":[]},{"id":"5a2b0ad2.aaa674","type":"mqtt-broker","z":"7d9ad29c.85c98c","broker":"192.168.10.215","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""},{"id":"7b562af0.dce684","type":"mqtt-broker","z":"","broker":"ec2-54-242-126-81.compute-1.amazonaws.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willPayload":"","birthTopic":"","birthQos":"0","birthPayload":""}]